--- 3주차 ---

pull requests = PR 작업내용을 반영해줄 수 있는지 물어보는 것
커밋을 수정할때는 나만의 작업 공간에다 저장할 것! 안그러면 꼬임
강제푸시는 나만사용하는 브랜치에서 작업한다!
revert 
reste = 3종류 2. mixed - 작업 내역은 놔두고 히스토리만 되돌림
                  3. hard - 아예 없앰    
stash 임시보관

좋은 git 커밋 메시지를 작성하기 위한 7가지 약속
이하 약속은 커밋 메시지를 English로 작성하는 경우에 최적화되어 있습니다. 한글 커밋 메시지를 작성하는 경우에는 더 유연하게 적용하셔도 좋을 것 같네요.

제목과 본문을 한 줄 띄워 분리하기
제목은 영문 기준 50자 이내로
제목 첫글자를 대문자로
제목 끝에 . 금지
제목은 명령조로
본문은 영문 기준 72자마다 줄 바꾸기
본문은 어떻게보다 무엇을, 왜에 맞춰 작성하기

gitignore

- 46) 3주차 총 정리
    
    ## PR
    🔥 작업내역을 프로젝트에 반영하는 것이 아니라 충분히 리뷰받고 최종적으로 프로젝트에 반영하는 단계입니다. 3단계 대신 사용한다고 생각하면 됩니다! 
    
    1단계. 누가 이 작업 할 것인지 정한다. - Issue
    2단계. 각자 맡은 것을 작업한다. - Branch
    3단계. 각자 작업을 프로젝트에 합친다. - merge
    👉 (경우에 따라). 작업한 내용을 리뷰하고 최종적으로 프로젝트에 반영한다. - PR 후 merge
    - **PR(Pull Request, 풀리퀘스트)** 는 내 작업내역을 바로 merge 하지 않고, 참여하고 있는 프로젝트에 내 작업(branch)를 merge해달라고 요청(Request) 를 먼저 보내는 것입니다.
    ## Commit 관리하기!
    
    - 작업하다가 commit 메시지에 오타가 났거나 파일을 까먹고 add(staging)하는 경우가 있겠죠? 
    이 때 최신의 commit을 수정하는 것을 **amend(어맨드,고치기)** 라고 합니다! amend 로는 가장 최신의 commit 만 고칠 수 있다는 것을 꼭 기억하세요!
    - 다른 사람들과 같이 협업하고 있다면 어떤 내용이 되돌려졌는지 기록으로 남기는 것도 중요합니다. 어떤 내용을 되돌렸는지 새로운 commit을 남기는 것을 **revert(리버트)** 라고 합니다. 최신 commit 뿐만 아니라 이전에 했던 commit 도 revert 로 되돌릴 수 있답니다!
    - **reset (리셋)은 commit 했던 작업내역을 말 그대로 리셋시키는 것입니다.**   
    '기억이 리셋되었다' 가 '기억이 없다'는 말인 것처럼요. 과거로 돌아가서 새로운 삶을 사는 것처럼 reset 이후에 작업내역은 없어진 commit 기록과 관계없습니다.
    - **stash(스태시)** 는 프로젝트의 변경사항을 임시적으로 보관해둘 때 사용합니다. 
    예를 들면, 다른 branch 로 체크아웃 하는 경우 현재 branch 의 변경사항이 사라지게 됩니다. 아직 작업 중이라서 commit 하지 않고 변경사항만 보관해두고 싶을 수 있겠죠? 이 때 commit 대신 stash 를 사용합니다.
    
    ## 의사소통편
    👉 규칙을 꼭 지켜야한다! 가 아니라 프로젝트와 협업을 잘 하기 위한 **의사소통 이라는 걸 기억하세요!**
    - commit 메세지 작성하는 규칙은 **commit 메시지 컨벤션(commit message convention)!**  (프로그래밍 세계에서 서로 조직(특정 기술을 사용하는 사람들, 회사 등)에서 합의한 규칙을 `convention` (컨벤션) 이라고 부릅니다. )
    - 👀 좋은 commit 메시지, 단위로 작성하게 되면
        - 어떤 작업을 했는지 commit history (commit log)만 보고 알 수 있다
        - 버그를 찾을 때와 코드 고치기 쉽다
        - 다른 사람이 코드를 리뷰할 때 편하다
    - 보통 코드리뷰는 아래의 단계에서 많이 일어납니다. 앞서 PR 수업 들었을 때 기억나시나요? 주로 PR 한 내역에서 댓글을 달면서  리뷰를 남기는 방식을 많이 사용한다고 했습니다.
    - **👀 코드리뷰를 하는 이유!**
        - 코드의 품질을 높일 수 있다!
        - 다른 사람의 눈으로 버그를 빠르게 발견할 수 있다!
        - 서로의 지식을 나누면서, 더 나은 방법을 찾아낼 수 있습니다.
        
        **→ 내가 만든 코드가 아니라 팀의 코드의 품질을 높인다!**
        
    - 공유하거나 공개되면 안되는 파일들은 공개된 repo 즉, 공개 Github repo 에 올라가면 안되겠죠? Git 이 마치 이런 파일들을 없는 것처럼 무시하게 하는 설정이 바로 `.gitignore` 입니다.
    - Github 프로젝트에서도 `README.md` 를 만들어 프로젝트 소개글을 적어둡니다. 프로젝트의 어마어마하게 많은 파일들을 하나하나씩 다 읽어볼 수는 없으니 꼭 이런 소개 파일이 있는게 좋겠죠!
    ## Github 에서 정보 얻고 나누기
    🔥 좋은 게 어떤 건지는 많이 많이 봐야 알아요~ Github 에서 기술 트렌드, 다른 사람들의 프로젝트를 찾아봅시다. 
    좋은 것들을 구경하면 써먹어봤습니다.
    - Github 의 다른 사람 코드들을 맘껏 탐색했고!
    - Github 프로필 소개 페이지 작성, Github 페이지 만들기 를 해보았죠!
    - 오픈소스(Open source)란 누구나 프로젝트를 사용하고, 수정하고, 배포할 수 있는 프로젝트를 의미했어요. 라이센스를 꼭 지켜줍시다! 많은 사람들이 프로젝트에 **컨트리뷰션(contribution, 기여) 하면서 발전시켜나가는 것!** 그게 바로 오픈 소스의 매력이죠!
    - 그리고! Python, Go, Javascript, Spring, React, Django, Spark, Hadoop 등등 널리 쓰이는 많은 프로그래밍 언어와 기술들이 모두 오픈소스랍니다! 
- 47) 앞으로 어떻게 Git 더 잘 써먹을 수 있을까요?
    
    👉 Git 쓰면 쓸 수록 늘겠죠? 
    앞으로 탐구하면 좋을 advanced 자료를 소개할게요!
    - 가장 좋은 것은 내가 일상생활에서 쓸 수 있는 리포지토리를 만드는 것이에요! 
    아까 같이 만들었던 Github pages 를 발전시켜서 개발 블로그로 만들 수도 있고, 
    TIL repo 에 매일매일 알게 된 내용들을 commit 하고 push!
    1. Git 개념과 사용법이 더 궁금하다면! 공식 책 보기!
        - 아래 책은 내가 에러가 나거나 사용하다가 막막해졌을 때 그때 찾아보세요. 책을 처음부터 끝까지 읽으면 힘들 수 있어요~ 추가적으로 Git 에 대한 개념과 상세한 옵션들이 궁금하시다면 꼭 이 책을 참고해보세요! 저도 종종 내용을 찾아보는 책 중에 하나랍니다.
    2. Git 명령줄(CLI, Command Line Interface)로 사용해보기! 
    CLI 는 명령어(comm까만 창을 이야기합니다. 영화에서 해커가 까만 화면에 몇 줄 타타탁 타이핑해서 해킹하는 장면 많이 보셨죠? 👩‍💻  
    - Terminal(까만 창 프로그램) 에서 명령어(Command Line) 으로 컴퓨터에게 명령을 내려 실행시키고 컴퓨터에게 메시지를 받는 것, 
    즉 명령줄로 컴퓨터와 상호작용(Interaction)하는 것을  CLI(Command Line Interface) 라고 부릅니다.    
    - 우리는 그동안 sourcetree에서 클릭클릭으로(이렇게 사용하는 것을 GUI라고 부릅니다) Git 을 사용해왔죠? 까만 창에 명령어를 입력해서 Git 을 사용할 수도 있습니다. 어떤 방법을 선택할 것인지는 상황에 맞게 선택하시면 됩니다!
    - 개발자들은 까만 창(terminal)을 많이 사용하기 때문에 따로 프로그램을 켜지 않고 git 을 쓸 수 있으니 편해서 사용하기도 합니다. 조금 더 설정을 주어서 사용하는 게 가능하다는 장점도 있어요.
    - sourcetree에도 많은 기능과 시각적으로 commit 히스토리를 볼 수 있기 때문에 충분히 실제 회사에서 개발할 때와 중급까지 유용하게 사용할 수 있답니다!
        👉 Git 을 CLI 로 사용하려면 기본적인 터미널 사용을 먼저 익히는 걸 추천드려요!
    - **[코드스니펫] 간단하게 보는 Git CLI 명령어**
    3. 내가 사용하는 개발 도구(IDE)에서 Git 사용하기
    
    - vscode, Pycharm, Intelij 같은 개발 도구들에서 Git을 사용할 수 있어요! 마치 우리가 sourcetree 를 사용해 Git 을 사용했던 것처럼요! 덧붙인 영상의 경우 한글 자막이 있습니다!
    - **[코드스니펫] VScode 에서 버전관리도구 사용하기**