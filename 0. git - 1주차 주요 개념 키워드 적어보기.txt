--- 추가목표 ---
에러노트를 써보자!
나만의 개념지도 그려보기

--- 1주차 --- 커밋과 원격 레포지토리 사용

커밋 ---
git - 만드는 프로그램
github - 만든것을 원격으로 올리고 공유하는 허브
소스트리 - git을 쉽게 사용하게 하는 프로그램

*커밋 3단계
애드=스테이징(무대에 올린다), 커밋메시지 작성, 커밋
커밋 id로 각각의 커밋을 구분한다.

처음에 .git 파일 만들어지는 과정(프로젝트 생성)을 깃 초기화 라고 함.

- **버전관리를 한다는 것은** 프로젝트 상태가 변경되는 정보를 알고 있다는 것입니다. Git 은 commit 을 사용해서 버전이 달라지는 것을 관리합니다.
- 컴퓨터에 있는 프로젝트를 Git 이 관리하는 프로젝트로 만들 수 있습니다. 앞으로 Git 으로 관리할꺼야! 하고 설정해주면 됩니다. 이 작업을 **git 초기화(git initialize)**한다고 표현합니다.
- 현재 프로젝트의 상태를 찰칵 📸  저장하는 것을 **commit** 이라고 합니다.

- commit 에는 아래를 포함합니다.
    - 누가(author), 언제 commit 했는지의 정보와 프로젝트 변경 내용
    - 작업내역이 어떤 것인지 알아볼 수 있게 적는 메시지를 'commit 메시지'라고 합니다.

- commit 에 반영할지 안할지는 파일 단위로 선택할 수 있습니다. commit 에 반영할 파일을 선택하는 것을 **add (혹은 staging, 스테이징)** 이라고 합니다.

- commit 한 기록은 **history** 로 볼 수 있습니다.

- 지금까지 우리가 한 작업은 'git 초기화하기(initialize) - add(staging) - commit' 입니다.
- git 초기화는 처음에 단 한번만 해 주면 됩니다. 작업 내역을 저장하기 위해서는 **add - commit** 만 하면 됩니다.

원격레포지토리 --- 
원격의 이름은 보통 orgin
소스트리 브랜치의 기준 브랜치 이름은 main
*깃허브에서 레포지토리 생성 후 나오는 주소 복사하여 소스트리에서 연결

- Git과 초면인 여러분들을 위한 팁! 
혼자 Git 프로젝트 작업을 할 때는 `pull` -> `로컬 repo commit` -> `push`  순서로 하면 좋아요.
- 원격 repo 와 로컬 repo 에서 같은 파일을 수정하면 Git 이 같은 파일을 수정했는데 내가 어떤 파일을 최종으로 할까? 라고 확인 메시지를 줍니다. (정확한 내용은 곧 배울꺼에요!) 이런 것을 바로 **충돌(conflict)**이라고 표현해요.
- 충돌을 피하기 위해서는 아래 순서를 따라주는 게 편해요. 같은 파일을 동시에 수정해버리면 충돌이 나니까 두 repo 의 상태를 똑같이 맞춰준 후에 변경작업을 해주는 거에요. 
1. 원격 repo 와 로컬 repo 의 상태를 똑같이 맞춰주기, 즉 로컬 repo 에 원격 repo 작업내역 가져오기 (`pull`)
2. 로컬 repo 의 작업 내용을 저장하고 (`commit`)
3. 원격 repo 에 로컬 repo 내용을 반영 (`push`)
- 원격 repo 에 변경사항이 생겼다! 하면 먼저 `pull` 하고 로컬 repo 에서 작업하면 많은 경우 충돌을 피할 수 있어요.
