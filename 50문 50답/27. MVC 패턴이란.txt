모델-뷰-컨트롤러(Model–View–Controller, MVC)는 
소프트웨어 공학에서 사용되는 소프트웨어 디자인 패턴이다.

디자인 패턴이란: 건축으로치면 공법에 해당하는 것으로, 소프트웨어의 개발 방법을 공식화 한 것이다. 
소수의 뛰어난 엔지니어가 해결한 문제를 다수의 엔지니어들이 처리 할 수 있도록 한 규칙이면서, 
구현자들 간의 커뮤니케이션의 효율성을 높이는 기법이다.

Model은 어플리케이션이 “무엇”을 할 것인지를 정의 합니다. 
내부 비지니스 로직을 처리하기 위한 역할을 할 것입니다.
Model : 백그라운드에서 동작하는 로직을 처리한다. 
(데이터를 가진 객체, 파라미터로 주로 쓰인다.)DB의 테이블과 대응하는 경우가 많다.)

View는 화면에 “무엇” 인가를 “보여주기 위한 역할”을 합니다. 
컨트롤러 하위에 종속되어, 모델이나 컨트롤러가 보여주려고 하는 모든 필요한 것들을 보여줄 것입니다.
사용자가 보게 될 결과 화면을 출력한다. (html/css/javascript를 모아둔 컨테이너)

Controller는 모델이 “어떻게” 처리할 지를 알려주는 역할을 할 것이고, 
모바일에서는 화면의 로직처리 부분입니다. 화면에서 사용자의 요청을 받아서 처리되는 부분을 
구현되게 되며, 요청 내용을 분석해서 Model과 View에 업데이트 요청을 하게 됩니다.
사용자의 입력처리와 흐름 제어를 담당한다. (사용자가 접근한 URL에 따라서 
사용자의 요청사항을 파악한 후, 그 요청에 맞는 데이터를 Model에 의뢰하고, 
데이터를 View에 반영해서 사용자에게 알려준다.)

MVC의 장점
1) 기능별로 코드를 분리하여 하나의 파일에 코드가 모이는 것을 방지하여 
가독성과 코드의 재사용이 증가한다.
2) 각 구성요소들을 독립시켜 협업을 할 때 맡은 부분의 개발에만 집중할 수 있어 
개발의 효율성을 높여준다
3) 개발 후에도 유지보수성과 확장성이 보장된다

MVC의 한계 
Model과 View는 서로의 정보를 갖고 있지 않는 독립적인 상태라고 하지만 
Model과 View사이에는 Controller를 통해 소통을 이루기에 의존성이 완전히 분리될 수 없습니다. 

복잡한 대규모 프로그램의 경우 다수의 View와 Model이 Controller를 통해 연결되기 때문에 
컨트롤러가 불필요하게 커지는 현상이 발생하기도 합니다. 
이러한 현상을 Massive-View-Controller현상이라고 하며 이를 보완하기 위해 
MVP, MVVM, Flux, Redux등의 다양한 패턴들이 생겨났습니다.