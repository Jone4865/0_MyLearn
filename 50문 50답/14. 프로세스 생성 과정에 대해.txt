프로세스란 ? 컴퓨터에서 연속적으로 실행되고 있는 컴퓨터 프로그램 ex) 카카오톡

스레드(thread) ? 프로세스 내에서 실행되는 흐름의 단위 ex) 대화창, 다른 대화창

👉 프로그램은 하나 이상의 프로세스를 가지고 있고, 하나의 프로세스는 반드시 하나 이상의 스레드를 갖는다.

 

프로세스 생성 과정

- 프로세스는 3가지의 주요 상태로 존재한다. 실행을 위해 준비하고 있는 상태에 있다가 실행되며, 실행 중에 필요에 따라 대기하고 있기도 한다.

 

준비(ready)상태

프로세스가 처리기를 사용하고 있지 않지만 언제든 사용할 수 있는 상태
프로레스가 처리기의 배정을 기다리고 있는 상태
다른 프로세스 실행을 위해서 일시적으로 정지해 있는 상태
실행(Run) 상태

프로세스가 CPU를 차지하고 있는 상태
프로세스의 명령이 실행되고 있는 상태
대기(Block, Wait, 보류) 상태

프로세스가 어떤 사건이 일어나기를 기다리고 있는 상태
처리속도가 느린 I/O(입출력) 작업 중인 상태
외부적인 사건이 생길 떄까지 실행할 수 없는 상태
 

하나의 프로그램이 실행되면 그 프로그램에 대응되는 프로세스가 생성되어 준비 리스트의 끝에 들어간다. 준비 리스트 상의 다른 프로세스들이 CPU를 할당받아 준비 리스트를 떠나면, 그 프로세스는 점차 준비 리스트의 앞으로 나가게 되고 언젠가 CPU를 사용할 수 있게 된다.

디스패치(dispatch)
준비 리스트의 맨 앞에 있던 프로세스가 CPU를 점유하게 되는 것, 즉 준비 상태에서 실행 상태로 바뀌는 것을 디스패치라고 하며 다음과 같이 표시한다.

dispatch (processname) : ready → running
보류(block)
실행 상태의 프로세스가 허가된 시간을 다 쓰기 전에 입출력 동작을 필요로 하는 경우 프로세스는 CPU를 스스로 반납하고 보류 상태로 넘어 간다. 이것을 보류라고 하며 다음과 같이 표시한다.

block (processname) : running → blocked
깨움(wakeup)
입출력 작업 종료 등 기다리던 사건이 일어났을 때 보류 상태에서 준비 상태로 넘어가는 과정을 깨움이라고 하며 다음과 같이 표시한다.

wakeup (processname) : blocked → ready
시간제한(timeout)
운영체제는 프로세스가 프로세서를 계속 독점해서 사용하지 못하게 하기 위해 clock interrupt를 두어서 프로세스가 일정 시간동안만 (시분할 시스템의 time slice) 프로세서를 점유할 수 있게 한다

timeout(processname) : running -> ready
 

문맥 교환(Context Switching)

- 하나의 프로세스가 CPU를 사용 중인 상태에서 다른 프로세스가 CPU를 사용하도록 하기 위해 이전의 프로세스의 상태를 PCB에 보관하고 또 다른 프로세스의 정보를 PCB에서 읽어 레지스터에 적재하는 과정

> 하나의 CPU에서 여러 개의 프로세스가 동시에 수행되는 것처럼 보이는 이유는 문맥교환이 빠르게 일어나기 때문

 

PCB(프로세스 제어 블록