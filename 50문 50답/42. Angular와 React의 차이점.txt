Angular와 React의 차이점  

가장 큰 차이점은 angular는 자체적으로 개발에 필요한 모든 요소들을 제공하는 프레임워크라고 표현하지만, react의 경우에는 자체적으로 요소들을 포함하고 있지 않기 때문에 엄격히 말해 프레임워크라고 표현하지 않는 점입니다.

이점을 제외하고 차이점을 살펴보면
1. 타입의 정의 부분
angular의 경우는 angular2부터 타입스크립트를 본격 적용해 정적 타입 정의를 하였고, 
react의 경우는 flow를 개발에 적용하고 있습니다. 
react의 경우는 유연성을 강조하고 개발자의 영역을 넓히는 반면 
angular의 경우에는 유연성에 의해 발생할 수 있는 위험성에 대한 부분을 낮취기 위해 타입스크립트를 포함했습니다.
angular의 경우는 안정성, react의 경우에는 유연성에 중점을 뒀다고 할 수 있습니다.

2. 컴포넌트
angular는 컴포넌트 기반 언어라는 타이틀을 갖고 있습니다. 
템플릿 작성을 위한 표준 HTML을 보장하고 이를 확장하는 방식으로 
모델과 뷰, 그리고 DOM 객체를 컴포넌트화 하고 템플릿에 대한 캡슐화를 통해 
이식성과 재사용성을 극대화 하는 것을 보장하여서 
마크업 개발자와 코드개발자의 자연스러운 협업을 보장해줍니다.
반면에 react는 JSX 문법을 사용해 
템플릿과 자바스크립트가 연결되어 구조와 기능이 하나로 묶여 작동하기 때문에 
템플릿 자체를 디버깅 할 수 있다는 장점이 있지만 
JSX 문법을 모르는 마크업 개발자에겐 개발이 완료 되었을 때만 완성된 디자인 결과를 확인할 수 있는 단점이 있습니다. 

3. MVC 패턴을 통한 데이터 동기화
angularJS가 처음 발표되었을 때 가장 강력한 기능 중에 하나가 
양방향 데이터 바인딩입니다. 
MVC 패턴의 모델이 변경되면 뷰가 함께 변경되고, 
뷰의 상태가 변경되면 모델의 상태도 함께 변경되어 
웹 개발자들에 새로운 경험을 주었습니다. 
그러나 app의 크기가 커지면서 데이터 바인딩을 위한 흐름이 난잡해지고
복잡도가 상승했는데요. 
react는 양방향 바인딩에서 오는 복잡도 증가 해결을 위해 가상돔을 적용하였습니다.

4. 비동기 프로세스
angular는 angular2부터 비동기 통신을 위해 RxJS를 도입하여 
안정성과 가독성을 높혔습니다. 하지만 RxJS의 난해한 개념과 
학습비용이 높은 단점을 해결하지 못했습니다. 
Rxjs를 대신해 기존의 callback과 promise등을 사용할 수 있게 유연성을 남겼지만 
아쉬운 느낌을 받을 수 있습니다.
react는 라이브러리를 지향한다는 철학에 맞게 
프레임워크 수준에서의 지원이 아닌 설계수준에서 해법을 찾고자 
Redux에 의해 비동기 통신에 대한 상태를 관리하여 
개발자에게 다양한 방법으로 처리할 수 있도록 지원합니다.

angular는 All-In-One 프레임워크라는 구글의 기본 철학과 방향성을 반영해 
프레임워크의 최소기능과 안정화된 기본 기능을 제공하며, 
React는 기능에 충실하고 사용자에게 유연성을 보장하자는 Facebook의 철학을 반영합니다.