1. promise는 .then으로 결과를 찍는 방식으로 이루어 지는데 
분기점이 계속 나뉘어질 경우 then 지옥이 나올 수가 있습니다.

asynk/await는 변수에 담에서 데이터를 조회하면 
해당 코드가 동기 코드처럼 읽히게 해주기 때문에 
then 지옥을 방지하고 데이터의 흐름을 이해하기 쉽습니다.

2. promise는 .catch로 에러를 핸들링할 수 있지만 
asynk/await는 에러를 핸들링 하는 기능이 없기 때문에 
try/catch문으로 에러를 핸들링 해주어야 합니다.

Async/Await은 프로미스 사용을 편하게 하기 위해 
javascript Es8에서 나온 문법 키워드이며
프로미스의 후속처리 메서드를 조금 더 편하게 사용하기 위해 등장했습니다.
 Promise는 자바스크립트 비동기 연산이 종료 된 후 
결과를 알기 위해 사용되는 객체입니다.  
Promise로 구현된 비동기 함수는 프로미스 객체를 반환하며 
이 프로미스 객체의 후속처리 메서드(then, catch)를 통해 비동기 결과를 처리할 수 있습니다.