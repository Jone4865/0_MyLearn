--- 2주차 --- 브랜치(각자의 작업공간:나뭇가지)와 머지(작업공간 합치기) 및 충돌 해결방법

브랜치와 머지 --
1. 이슈할당(누가 작업할지 정하기)
2. 브랜치(각자의 작업공간)에서 작업한다
3. 머지(작업결과물을 합친다)
(4. (경우에 따라)리뷰 후 머지)

1.커밋되지 않은 작업내역을 커밋한다
2.원격레포지토리에 이슈를 생성한다

현재 작업할 브랜치를 선택하는 것이 체크아웃
브랜치를  삭제할때는 다른 브랜치로 체크아웃 후 강제삭제 하면됌
머지를 할때는 머지를 할장소에 체크아웃 한 후 머지한다
머지성공한것은 지워서 공간확보하는게 좋다
*브랜치마다 다른 파일을 수정 해야한다 안그러면 에러남

검색할때 기술or도구 이름 +단어 조합으로 하면 검색결과가 잘 나옴(how to googling for programer)
ex) (사이트이름) sourcetree branch
사이트 추천 - https://stackoverflow.com/questions/927358/how-do-i-undo-the-most-recent-local-commits-in-git
                 - https://woowabros.github.io/experience/2017/10/30/baemin-mobile-git-branch-strategy.html
                 - https://git-scm.com/doc
충돌 해결 --
merge conflict - 같은 파일을 수정 하면 나게되는 오류
파일 띄울때는 꼭 해당 브랜치에서 새로 띄워서 사용할 것
에러가 나게 된 부분을 파일 상태에서 띄워서 보고 에러 코드를 지우고 커밋하면 해결된다
에러를 해결하고 새로운 내용을 추가하는 것이 좋다

*트래킹 은 로컬리포랑 원격리포가 연결되어있나를 확인한다고 생각하면된다.

푸시와 풀은 기본적으로 트래킹 되고 있는 브랜치를 기준으로 커밋 내역을 반영한다

- 협업할 때는 아래의 단계를 따릅니다. 
1단계. 누가 이 작업 할 것인지 정한다. - Issue
2단계. 각자 맡은 것을 작업한다. - Branch
3단계. 각자 작업을 프로젝트에 합친다. - merge
(경우에 따라). 작업한 내용을 리뷰하고 최종적으로 프로젝트에 반영한다. - PR 후 merge
- issue 는 내가 할 작업, 기능 추가, 버그 리포트 등 여러 방식으로 사용할 수 있습니다.
- 협업을 하기 위해 issue 를 만들어 누가 작업할지 정하고, 브랜치를 만들어 작업할 공간을 나눕니다.
- 브랜치(branch)는 특정 commit 에서 갈라져나와 작업할 수 있습니다. 우리는 기능별로 이름을 만들어주어 브랜치에 작업해줍니다.
- 작업할 브랜치로 바꾸는 것을 체크아웃(checkout)이라고 합니다. 체크아웃된 브랜치에만 commit 이 반영됩니다.
- 브랜치의 작업 내역 commit 들을 다른 branch 로 반영(합치기)는 것을 **Merge(머지, 병합)** 이라고 부릅니다. 개발할 때는 기준이 되는 기본 브랜치를 정해놓고 해당 브랜치에 내용을 merge합니다. 우리는 main 브랜치에 작업 브랜치의 내용을 merge 했습니다.- 브랜치명은 규칙을 가지고 잘 이름 지으면 프로젝트 관리가 쉬워집니다. 
작업이 완료되면 작업한 브랜치는 보통 삭제해줍니다. 나중에 브랜치 설정이 꼬이는 것을 방지할 수 있습니다.
- 각 작업 브랜치에서 작업할 때는 다른 브랜치의 영향을 받지 않고 독립적으로 작업할 수 있습니다. jjigae.txt 파일을 각각 브랜치에서 자유롭게 수정한 것처럼요!
- Merge 하는 과정에서 같은 파일이 동일한 부분이 수정된 게 발견되면 **Merge conflict(병합 충돌)** 이 발생합니다.
- Git 이 똑똑하게 충돌을 파악할 수 있도록 파일 내용을 고쳐서 충돌 내역을 보여줍니다.
- conflict 를 수정하려면 최종적으로 반영할 내역으로 고친 후에 merge commit 하면 됩니다.
- tracking 한다는 것은 로컬 repo와 원격 repo의 특정 브랜치를 연결해주는 것입니다.
- push와 pull 은 기본적으로 tracking(추적)되고 있는 브랜치를 기준으로 commit 내역을 반영합니다.
